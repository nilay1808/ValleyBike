# -*- coding: utf-8 -*-
"""Valleybike Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E0kg9v64Ktz_QMVBfbrYxLOQ2kBvl2fK
"""

import json, csv
import math
import pandas as pd
import numpy as np
from datetime import datetime
import calendar
import sklearn as skl
import seaborn as sns
import matplotlib.pyplot as plt
from collections import *

# Mounting to folder with csv files
from google.colab import drive
drive.mount('/content/drive')
folder = '/content/drive/Shared drives/Math 456/ValleyBike Data/'

# Indexing the bike stations from Places.csv
# i.e. indexToLoc[0] = 'amherst town hall' and locToIndex['amherst town hall'] = 0
indexToLoc = {}
locToIndex = {}
locations = []
with open(folder + 'Places.csv') as csv_file:
  csv_reader = csv.reader(csv_file,delimiter=',')
  line_count = 0
  for row in csv_reader:
    # if line_count>=54:
    #   row[0] = row[0][:-1]
    # if line_count==56:
    #   row[0]= "Pynchon Park/Museums"
    if line_count != 0:
      indexToLoc[line_count-1] = row[0]
      locToIndex[row[0]] = line_count-1
      locations.append(row[0])
    line_count +=1 
print(indexToLoc[53])
# Retrieving capacities of each station
capacityStation = [0]*len(locations)
cap_df = pd.read_csv(folder+"VB-11-13-2019.csv",header=None)
for index, row in cap_df.iterrows():
    if index!=0:
      capacityStation[locToIndex[row[3]]] = row[9]

# Creating the json dict
data = {}
months = ['jan','feb','mar','apr','may','jun','jul','aug','sept','oct','nov','dec']

hours = range(24)
# Days array represents day of the week with 0 meaning Sunday and 6 meaning Saturday
days = range(7)
locLength = range(len(locations)) 
 
for n in locLength:
  data[n] = {}
  for month in months:
    data[n][month] = {}
    for day in days:
      data[n][month][day] = {}
      for hour in hours:
        data[n][month][day][hours] = []

# Data now will be represented as data[index of station][month][index of day of week][index of hour of day] (To be worked on if needed)

#======================================================================================================================================

# Creating a dataframe through pandas to fully represent the data in the csv files 
cols= ['Location','Month','Dow','weekNum','hour']
dfDock = pd.DataFrame(columns=cols)
dfRemove = pd.DataFrame(columns=cols)
days = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']
daysToIndex = {}

for n,d in enumerate(days):
  daysToIndex[d] = n

# Working with the August file first 
with open(folder + 'aug2019.csv') as csv_file:
  csv_reader = csv.reader(csv_file,delimiter=',')
  n = 0
  records = []
  recordsRemove = []
  for row in csv_reader:
    if n==0:
      n+=1
      continue
    record = []
    recordRemove = []
    # Appending location
    record.append(row[12])
    recordRemove.append(row[11])
    
    date = datetime.strptime(row[2],'%Y-%m-%d')
    dateRemove = datetime.strptime(row[0],'%Y-%m-%d')

    # Appending month
    record.append(calendar.month_name[date.month])
    recordRemove.append(calendar.month_name[dateRemove.month])

    # Appending the day of the week
    record.append(calendar.day_name[date.weekday()])
    recordRemove.append(calendar.day_name[dateRemove.weekday()])

    # Appending the week number the day appeared in
    record.append(int((date.day+1)/7))
    recordRemove.append(int((dateRemove.day+1)/7))

    concatTime = row[3][:8]
    concatTimeRemove = row[1][:8]
    dockTime = datetime.strptime(concatTime,'%H:%M:%S')
    dockTimeRemove = datetime.strptime(concatTimeRemove,'%H:%M:%S')

    record.append(dockTime.hour)
    recordRemove.append(dockTimeRemove.hour)
    records.append(record)
    recordsRemove.append(recordRemove)


# Created DataFrames for bikes removed and docked from the records gathered
df = pd.DataFrame(records,columns=cols)
dfRemove = pd.DataFrame(recordsRemove,columns=cols)

for n in range(len(capacityStation)):
  if capacityStation[n] ==0:
    capacityStation[n] = 12
  capacityStation[n]= int(capacityStation[n])
df

newCSVData = []
with open(folder + 'summer2018.csv') as csv_file:
  csv_reader = csv.reader(csv_file,delimiter=',')
  count=0
  for row in csv_reader:
    newString = []
    if count==0:
      count+=1
    else:
      start = row[1].split()
      end = row[2].split()
      if '-08-' in start[0] and '-08-' in end[0]:
        newString.extend([start[0],start[1][0:-3],end[0],end[1][0:-3], row[3],row[4]])
        newCSVData.append(newString)
print(newCSVData)

with open(folder+"formattedSummer2018.csv",'w',newline='') as csvFile:
  writer = csv.writer(csvFile)
  writer.writerow(['Unlock Date','Unlock Time','Lock Date','Lock Time','Start','End'])
  writer.writerows(newCSVData)
  csvFile.close()

with open(folder + 'formattedSummer2018.csv') as csv_file:
  csv_reader = csv.reader(csv_file,delimiter=',')
  n = 0
  records = []
  recordsRemove = []
  for row in csv_reader:
    if n==0:
      n+=1
      continue
    record = []
    recordRemove = []
    # Appending location
    record.append(row[5])
    recordRemove.append(row[4])
    
    date = datetime.strptime(row[2],'%Y-%m-%d')
    dateRemove = datetime.strptime(row[0],'%Y-%m-%d')

    # Appending month
    record.append(calendar.month_name[date.month])
    recordRemove.append(calendar.month_name[dateRemove.month])

    # Appending the day of the week
    record.append(calendar.day_name[date.weekday()])
    recordRemove.append(calendar.day_name[dateRemove.weekday()])

    # Appending the week number the day appeared in
    record.append(int((date.day+1)/7))
    recordRemove.append(int((dateRemove.day+1)/7))

    concatTime = row[3][:8]
    concatTimeRemove = row[1][:8]
    dockTime = datetime.strptime(concatTime,'%H:%M:%S')
    dockTimeRemove = datetime.strptime(concatTimeRemove,'%H:%M:%S')

    record.append(dockTime.hour)
    recordRemove.append(dockTimeRemove.hour)
    records.append(record)
    recordsRemove.append(recordRemove)

dfSummer = pd.DataFrame(records,columns=cols)
dfRemoveSummer = pd.DataFrame(recordsRemove,columns=cols)

for n in range(len(capacityStation)):
  if capacityStation[n] ==0:
    capacityStation[n] = 12
  capacityStation[n]= int(capacityStation[n])
dfSummer

print(capacityStation[locToIndex['Holyoke Community College']])
print(locToIndex)

docking_locations = []
locs = set(df['Location'])
print(df['Location'])
for loca in locs:
  docking_locations.append(df.loc[df["Location"]==loca])
#print(df.loc[df['Location'] == "UMass Southwest"])

print(df.columns.tolist()[0:4])
countsDock = df.groupby(df.columns.tolist()[0:4],as_index=False)
dockSummer = dfSummer.groupby(dfSummer.columns.tolist()[0:4],as_index=False)
removalSummer = dfRemoveSummer.groupby(dfRemoveSummer.columns.tolist()[0:4],as_index=False)
countsRemoval= dfRemove.groupby(dfRemove.columns.tolist()[0:4],as_index=False)
sizesRemoval = countsRemoval.size()
sizesDock = countsDock.size()
sizesRSummer = removalSummer.size()
sizesDSummer = dockSummer.size()

print(sizesRSummer)
print(sizesDSummer)
#print(docking_locations[0])

print(sizesDock)
print(sizesRemoval)

# this gets the docking rates for each day of each week for each hour in august
# indices: 0 - Station, 1 - Month, 2 - Day of Week, 3 - Week number, 4 - Hour, 5 - Rate for the hour

tests = []
for key, item in countsDock:
  tests.append(key)
for i in range(len(sizesDock)):
  tests[i] += (sizesDock[i],)

#print(set(tests[:]))
# print(tests)
stations = defaultdict()
#print(2 in stations)
for loc,month,day,week,rate in tests:
  week = str(week)
  # hour = str(hour)
  if loc not in stations:
    stations[loc]=defaultdict()
  if month not in stations[loc]:
    stations[loc][month]=defaultdict()
  if week not in stations[loc][month]:
    stations[loc][month][week]=defaultdict()
  if day not in stations[loc][month][week]:
    stations[loc][month][week][day]= defaultdict()
    # stations[loc][month][week][day] = defaultdict()
    stations[loc][month][week][day]['removal']='0'
  stations[loc][month][week][day]['dock']= str(rate)

tests2 = []
for key, item in countsRemoval:
  tests2.append(key)
for i in range(len(sizesRemoval)):
  tests2[i] += (sizesRemoval[i],)
#print(set(tests[:]))

for loc,month,day,week,rate in tests2:
  week = str(week)
  # hour = str(hour)
  if loc not in stations:
    stations[loc]=defaultdict()
  if month not in stations[loc]:
    stations[loc][month]=defaultdict()
  if week not in stations[loc][month]:
    stations[loc][month][week]=defaultdict()
  if day not in stations[loc][month][week]:
    stations[loc][month][week][day]= defaultdict()
    stations[loc][month][week][day]['dock']='0'
    
  stations[loc][month][week][day]["removal"]=str(rate)
#print(stations.keys())
#print(stations['Look Park Virtual Station'])
for s in stations.keys():
  for w in ["0","1","2","3"]:
    if int(w) < 3:
      if w not in stations[s]['August']:
        stations[s]["August"][w] = defaultdict()
      for d in days:
        #print(s,w,d)
        if d not in stations[s]["August"][w]:
          stations[s]["August"][w][d] = defaultdict()
          stations[s]["August"][w][d]['removal'] = 0
          stations[s]["August"][w][d]['dock'] = 0
#print(stations['Look Park Virtual Station']["August"][0].keys())

print(stations["Amherst Town Hall"]["August"]["0"])

tests = []
for key, item in dockSummer:
  tests.append(key)
for i in range(len(sizesDSummer)):
  tests[i] += (sizesDSummer[i],)
# print(stations)
#print(set(tests[:]))
print(tests)
#print(2 in stations)
for loc,month,day,week,rate in tests:
  week = str(week)
  # hour = str(hour)
  if loc not in stations:
    stations[loc]=defaultdict()
  if month not in stations[loc]:
    stations[loc][month]=defaultdict()
  if week not in stations[loc][month]:
    stations[loc][month][week]=defaultdict()
  if day not in stations[loc][month][week]:
    stations[loc][month][week][day]= defaultdict()
    stations[loc][month][week][day]['removal']=0
  if 'dock' not in stations[loc][month][week][day]:
    stations[loc][month][week][day]['dock']= str(rate)
  else:
    stations[loc][month][week][day]['dock']=str((rate+float(stations[loc][month][week][day]['dock'])))

tests2 = []
for key, item in removalSummer:
  tests2.append(key)
for i in range(len(sizesRSummer)):
  tests2[i] += (sizesRSummer[i],)
#print(set(tests[:]))

for loc,month,day,week,rate in tests2:
  week = str(week)
  # hour = str(hour)
  if loc not in stations:
    stations[loc]=defaultdict()
  if month not in stations[loc]:
    stations[loc][month]=defaultdict()
  if week not in stations[loc][month]:
    stations[loc][month][week]=defaultdict()
  if day not in stations[loc][month][week]:
    stations[loc][month][week][day]= defaultdict()
    stations[loc][month][week][day]['dock']='0'
    
  if 'removal' not in stations[loc][month][week][day]:
    stations[loc][month][week][day]['removal']= str(rate)
  else:
    stations[loc][month][week][day]['removal']=str((rate+float(stations[loc][month][week][day]['removal'])))
#print(stations.keys())
#print(stations['Look Park Virtual Station'])
for s in stations.keys():
  for w in ["0",'1','2','3']:
    if int(w) < 3:
      if w not in stations[s]['August']:
        stations[s]["August"][w] = defaultdict()
      for d in days:
        #print(s,w,d)
        if d not in stations[s]["August"][w]:
          stations[s]["August"][w][d] = defaultdict()
          stations[s]["August"][w][d]['removal'] = '0'
          stations[s]["August"][w][d]['dock'] = '0'
print(stations["Amherst Town Hall"]["August"]['0'])



import json
for s in stations.keys():
  for w in stations[s]["August"].keys():
    for d in stations[s]["August"][w].keys():
      stations[s]["August"][w][d]["dock"] = str(float(stations[s]["August"][w][d]["dock"])/24)
      stations[s]["August"][w][d]["removal"]= str(float(stations[s]["August"][w][d]["removal"])/24)
      if float(stations[s]["August"][w][d]["dock"]) == 0.0 and float(stations[s]["August"][w][d]["removal"]) == 0.0:
        stations[s]["August"][w][d]["ratio"]="0.5"
      else:
        stations[s]["August"][w][d]["ratio"] = str(float(stations[s]["August"][w][d]["dock"])/(float(stations[s]["August"][w][d]["dock"])+float(stations[s]["August"][w][d]["removal"])))


      

# #print(pd.DataFrame.from_dict(stations['Amherst Town Hall']["August"][0]["Monday"]))
# expected_values = []
# rates = []
# docks = []
# pHours = []
# for i in stations['Amherst Town Hall']["August"].keys():
#   #print(i)
#   if "Monday" in stations['Amherst Town Hall']["August"][i]:
#     curRate = [stations['Amherst Town Hall']["August"][i]["Monday"][j]["removal"] for j in sorted(stations['Amherst Town Hall']["August"][i]["Monday"].keys())]
#     pExp = [stations['Amherst Town Hall']["August"][i]["Monday"][j]["expected"] for j in sorted(stations['Amherst Town Hall']["August"][i]["Monday"].keys())]
#     curDock = [stations['Amherst Town Hall']["August"][i]["Monday"][j]["dock"] for j in sorted(stations['Amherst Town Hall']["August"][i]["Monday"].keys())]
#     docks.append(curDock)
#     rates.append(curRate)
#     expected_values.append(pExp)
#     pHours.append(sorted(list(stations['Amherst Town Hall']["August"][i]["Monday"].keys())))

# # for x in range(len(pHours)):
# #   print(pHours[x],expected_values[x])
#   # list1 = sorted(pHours[x])
#   # plt.subplot(2,2,x+1)
#   # plt.subplots_adjust(wspace=.1,hspace= .8)
#   # plt.scatter(list1,expected_values[x],label = "Monday Week "+ str(x))
#   # plt.title("Week" + str(x))
#   # if x%2 == 0:
#   #   plt.ylabel("Expected Value")
#   # plt.suptitle("Expected Values per hour per week for Mondays in August")   
#   # plt.xlabel("Hours")


# #plt.legend(loc='lower left', bbox_to_anchor= (0.0, 1.01),ncol=4 , 
#            # borderaxespad=0, frameon=False)
# #  print(pExp)
# # print(stations["Amherst Town Hall"]["August"][0]["Monday"][9])

# print("pHours:",pHours)


data = {}
data['expect'] = {}
data['removal'] = {}
data['docking'] = {}
for n in range(57):
  data['expect'][n] = {}
  data['removal'][n] = {} 
  data['docking'][n] = {}
  for i in range(24):
    try:
      data['expect'][n][i] = str(int(stations[indexToLoc[n]]["August"][0]["Monday"][i]["expected"]))
      data['removal'][n][i] = str(int(stations[indexToLoc[n]]["August"][0]["Monday"][i]["removal"]))
      data['docking'][n][i] = str(int(stations[indexToLoc[n]]["August"][0]["Monday"][i]["dock"]))

    except:
      data['expect'][n][i] = '8'
      data['removal'][n][i] = '0'
      data['docking'][n][i] = '0'
# print(data['expect']['0']['1'])
# print(stations['Amherst Town Hall']['August'][0]["Monday"][0]["expected"])
with open(folder+'data_v3.txt', 'w') as outfile:
    json.dump(data, outfile)
print(stations)

with open(folder + 'test.txt', 'w') as json_file:
  json.dump(stations, json_file)

# indices: 0 - Station, 1 - Month, 2 - Day of Week, 3 - Week number, 4 - Hour, 5 - Rate for the hour
#print(stations['East Hadley Road'] ['August'] [1] ['Tuesday'] [17])
with open(folder+'rates.csv', 'w', newline='') as csvFile:
    writer = csv.writer(csvFile)
    writer.writerow(["Station","Month"," Week","DOW","Dock","Removal"])
    for station in stations.keys():
      for month in stations[station].keys():
        for week in stations[station][month].keys():
          for dow in stations[station][month][week].keys():
            if month != 'July':
              writer.writerow([station,month,week,dow,stations[station][month][week][dow]['dock'],stations[station][month][week][dow]['removal']])
                # if station == "Amherst Town Hall" and week == 0 and dow == "Friday" and hour == 18:
                #   print("AAAAAAAAA",stations[station][month][week][dow][hour]['ratio']) 

csvFile.close()

for x in range(len(pHours)):
 # print(pHours[x],expected_values[x])
  list1 = sorted(pHours[x])
  
  plt.subplot(2,2,x+1)
  
  plt.subplots_adjust(wspace=.1,hspace= .8)#, bottom=None, right=None, top=None, wspace=None, hspace=None)
  plt.scatter(list1,rates[x],label = "Monday Week "+ str(x))
  plt.title("Week" + str(x))
  if x%2 == 0:
    plt.ylabel("Removal Rates")
       
  plt.xlabel("Hours")
plt.suptitle("Removal Rates per hour per week for Mondays in August")

for x in range(len(pHours)):
 # print(pHours[x],expected_values[x])
  list1 = sorted(pHours[x])
  plt.subplot(2,2,x+1)
  plt.subplots_adjust(wspace=.1,hspace= .8)
  plt.scatter(list1,docks[x],label = "Monday Week "+ str(x))
  plt.title("Week" + str(x))
  if x%2 == 0:
    plt.ylabel("Docking Rates")   
  plt.xlabel("Hours")
  plt.suptitle("Docking Rates per hour per week for Mondays in August")
  plt.savefig('dock_rates.png')

"""This is where our Gurobi program will be written"""

# from gurobipy import *
import numpy as np

time = 24
numOfLocations = len(locations)
optBikes = np.random.randint(0,10,size=(time,numOfLocations))
optBikes = optBikes/10
optBikes = optBikes * capacityStation
optBikes = optBikes.transpose()
for i in range(numOfLocations):
  for j in range(time):
    optBikes[i][j] = int(optBikes[i][j])
print(optBikes.shape)
print(optBikes)
numOfBikes = 388


st = range(time)
sl = range(numOfLocations)
sb = range(4)

p_small, p_big = (2,8)

m = Model("PV Bikes")
w = m.addVars(numOfLocations,time)
x = m.addVars(numOfLocations,time)
y = m.addVars(numOfLocations,time)
s = m.addVars(numOfLocations,time)
b = m.addVars(4,numOfLocations,time, vtype = GRB.BINARY)
c = m.addVars(4,numOfLocations,time, vtype = GRB.BINARY)
# Setting Objective function
m.setObjective(sum(w[j,k] for j in sl for k in st), GRB.MINIMIZE)

# Setting Constraints
m.addConstrs(y[i,j] == optBikes[i][j] for i in sl for j in st) # Fixing optimal values found earlier


# These are the constraints done in office hours although we do not know what are the constants should be as in the 'C' variables
for i in sl:
  for j in st:
    m.addConstr(s[i,j] <= x[i,j]-y[i,j] + b[1,i,j]*c[1,i,j] +b[3,i,j]*c[3,i,j])
    m.addConstr(s[i,j] >= x[i,j]-y[i,j])
    m.addConstr(s[i,j] <= y[i,j]-x[i,j] + b[0,i,j]*c[0,i,j] +b[2,i,j]*c[2,i,j])
    m.addConstr(s[i,j] >= y[i,j]-x[i,j])
    m.addConstr(w[i,j] <= p_small*s[i,j]+ b[2,i,j]*C + b[3,i,j]*C)
    m.addConstr(w[i,j] >= p_small*s[i,j])
    m.addConstr(w[i,j] >= p_big*s[i,j]+ b[0,i,j]*C + b[1,i,j]*C)
    m.addConstr(w[i,j] <= p_big*s[i,j])

# Although the expected value should be found through methods derived from gradient descent, we have decided to use solely the rates to determine the optimal number for now

# There still needs to be constraints for each 'b' variable and enforce if 1 is on, then the other b variables must be 0.

# csvData = [['Person', 'Age'], ['Peter', '22'], ['Jasmine', '21'], ['Sam', '24']]
csvData =[]
# i=0
for n in range(len(capacityStation)):
  toAppend = []
  toAppend.append(indexToLoc[n])
  toAppend.append(capacityStation[n])
  csvData.append(toAppend)

with open(folder+'capacity.csv', 'w') as csvFile:
    writer = csv.writer(csvFile)
    writer.writerows(csvData)
csvFile.close()

